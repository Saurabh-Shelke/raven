{
  "version": 3,
  "sources": ["frappe-html:/Users/saurabh/Desktop/exacuer2/erpnext/frappe-bench/apps/raven/raven/public/js/templates/send_message.html", "../../../../../apps/raven/raven/public/js/timeline_button.js", "../../../../../apps/raven/raven/public/js/raven.bundle.js"],
  "sourcesContent": ["\n\tfrappe.templates['send_message'] = `<div class=\"timeline-message-box\" style=\"padding: 2px; overflow: hidden;\">\n    <div class=\"message-header\"\n        style=\"align-items: flex-start; margin-bottom: 10px; display: flex; flex-direction: column;\">\n        <div class=\"actions\" style=\"flex-shrink: 0; display: flex; align-items: center; padding-bottom: 4px; padding-left: 2px;\">\n\n            {% if (is_direct_message) { %}\n            <span style=\"font-weight: 500; font-size: 12px;\">Direct Message with &nbsp;</span>\n            {% } %}\n\n            <a class=\"action-btn\" href=\"/raven/channel/{{channel_id}}\" title=\"Open {{ channel_name }}\" target=\"_blank\"\n                style=\"text-decoration: underline; font-weight: 500; font-size: 12px; margin: 0;\">\n                {% if (is_direct_message) { %}\n                <!-- split the channel_name check the  userID with owner theone which is not same display it's full_name -->\n                {%var users = channel_name.split('_') %}\n                {% var user_one = users[0].trim()%}\n                {% var user_two = users[1].trim()%}\n                {% if (user_one === owner) { %}\n                {{peer_user}}\n                {% } else { %}\n                {{peer_user}}\n                {% }%}\n                {%} else { %}\n                {% if(type == \"Open\"){ %}\n                <i class=\"fa fa-globe\"></i>\n                {% } else if(type == \"Private\"){ %}\n                <i class=\"fa fa-lock\"></i>\n                {% } else if(type == \"Public\"){ %}\n                <i class=\"fa fa-hashtag\"></i>\n                {% } %}\n                {{ channel_name }}\n                {%} %}\n            </a>\n            <span class=\"text-muted\" style=\"font-size: 12px; margin-left: 2px;\">\n                &nbsp;- {{ comment_when(creation) }}\n            </span>\n\n        </div>\n        <div class=\"user-info\" style=\"display: flex; align-items: flex-start;\">\n            <div class=\"user-avatar\" style=\"flex-shrink: 0;\">\n            {{ frappe.avatar(owner, \"avatar-medium\") }}\n            </div>\n            <div class=\"user-details\"\n                style=\"display: flex; flex-direction: column; align-items: flex-start; margin-left: 8px; width: 90%;\">\n                <span style=\"font-weight: bold;\">\n                    {{ full_name || frappe.user.full_name(owner) }}\n                </span>\n                <span\n                    style=\"font-weight: normal; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden;\">\n                    {{text}}\n                </span>\n            </div>\n        </div>\n        </div>\n        {% if (file && file.length) { %}\n    <div style=\"margin-top: 10px\">\n        <div class=\"ellipsis flex\">\n            <a href=\"{%= encodeURI(file).replace(/#/g, \\'%23\\') %}\" class=\"text-muted small\" target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                <svg viewBox=\"0 0 16 16\" class=\"icon icon-xs\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M14 7.66625L8.68679 12.8875C7.17736 14.3708 4.64151 14.3708 3.13208 12.8875C1.62264 11.4042 1.62264 8.91224 3.13208 7.42892L7.84151 2.80099C8.9283 1.733 10.6189 1.733 11.7057 2.80099C12.7925 3.86897 12.7925 5.53028 11.7057 6.59827L7.35849 10.8109C6.75472 11.4042 5.78868 11.4042 5.24528 10.8109C4.64151 10.2176 4.64151 9.26823 5.24528 8.73424L8.86792 5.17429\"\n                    stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" />\n                </svg>\n            {%= file.split(\"/\").slice(-1)[0] %}\n            <svg class=\"icon icon-xs\" style=\"color: var(--yellow-300)\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\n                    d=\"M8.077 1.45h-.055a3.356 3.356 0 00-3.387 3.322v.35H3.75a2 2 0 00-2 2v5.391a2 2 0 002 2h8.539a2 2 0 002-2V7.122a2 2 0 00-2-2h-.885v-.285A3.356 3.356 0 008.082 1.45h-.005zm2.327 3.672V4.83a2.356 2.356 0 00-2.33-2.38h-.06a2.356 2.356 0 00-2.38 2.33v.342h4.77zm-6.654 1a1 1 0 00-1 1v5.391a1 1 0 001 1h8.539a1 1 0 001-1V7.122a1 1 0 00-1-1H3.75zm4.27 4.269a.573.573 0 100-1.147.573.573 0 000 1.147zm1.573-.574a1.573 1.573 0 11-3.147 0 1.573 1.573 0 013.147 0z\"\n                    fill=\"currentColor\" stroke=\"currentColor\"></path>\n            </svg>\n            </a>\n            </div>\n    </div>\n    {% } %}\n</div>`;\n", "// Timeline button for Frappe\n$(document).on('app_ready', function () {\n  $.each(frappe.boot.user.can_read, function (i, doctype) {\n    let buttonAdded = false; // Track if the button has been added\n\n    frappe.ui.form.on(doctype, {\n      refresh: function (frm) {\n        if (!frm.is_new()) {\n          if (frm.footer?.frm?.timeline && !buttonAdded) {\n            let send_message_modal = (channels) => {\n              if (channels && channels.message && channels.message.length > 0) {\n                let channel_id = [];\n                let dm_list = [];\n                let channel_list = [];\n\n                channels.message.forEach((channel) => {\n                  if (channel.is_direct_message) {\n                    dm_list.push(channel.full_name);\n                    channel_id.push({\n                      value: channel.name,\n                      name: channel.full_name,\n                    });\n                  } else {\n                    channel_list.push(channel.channel_name);\n                    channel_id.push({\n                      value: channel.name,\n                      name: channel.channel_name,\n                    });\n                  }\n                });\n\n                let setup_attach = () => {\n                  const fields = dialog.fields_dict;\n                  const attach = $(fields.select_attachments.wrapper);\n\n                  if (!frm.attachments) {\n                    frm.attachments = [];\n                  }\n\n                  let args = {\n                    folder: 'Home/Attachments',\n                    on_success: (attachment) => {\n                      frm.attachments.push(attachment);\n                      render_attachment_rows();\n                    },\n                  };\n\n                  if (frm) {\n                    args = {\n                      doctype: frm.doctype,\n                      docname: frm.docname,\n                      folder: 'Home/Attachments',\n                      on_success: (attachment) => {\n                        frm.attachments.attachment_uploaded(attachment);\n                        render_attachment_rows();\n                      },\n                    };\n                  }\n\n                  $(`\n                    <label class=\"control-label\">\n                      ${__('Select Attachments')}\n                    </label>\n                    <div class='attach-list'></div>\n                    <p class='add-more-attachments'>\n                      <button class='btn btn-xs btn-default'>\n                        ${frappe.utils.icon('small-add', 'xs')}&nbsp;\n                        ${__('Add Attachment')}\n                      </button>\n                    </p>\n                  `).appendTo(attach.empty());\n\n                  attach\n                    .find('.add-more-attachments button')\n                    .on('click', () => new frappe.ui.FileUploader(args));\n                  render_attachment_rows();\n                };\n\n                let render_attachment_rows = (attachment) => {\n                  const select_attachments =\n                    dialog.fields_dict.select_attachments;\n                  const attachment_rows = $(select_attachments.wrapper).find(\n                    '.attach-list'\n                  );\n\n                  // Clear existing attachments\n                  attachment_rows.empty();\n\n                  if (attachment) {\n                    attachment_rows.append(\n                      get_attachment_row(attachment, true)\n                    );\n                  } else {\n                    let files = [];\n                    // Add attachments from form\n                    // check if attachment already exists in files array\n\n                    if (frm.attachments && frm.attachments.length) {\n                      // files = files.concat(frm.attachments);\n                      files = files.concat(\n                        frm.attachments.filter((attachment, index, array) => {\n                          return !array\n                            .slice(0, index)\n                            .some(\n                              (obj) => obj.file_name === attachment.file_name\n                            );\n                        })\n                      );\n                    }\n                    if (frm) {\n                      files = files.concat(frm.get_files());\n\n                      files = files.filter((attachment, index, array) => {\n                        return !array\n                          .slice(0, index)\n                          .some(\n                            (obj) => obj.file_name === attachment.file_name\n                          );\n                      });\n                    }\n\n                    if (files.length) {\n                      $.each(files, (i, f) => {\n                        if (!f.file_name) return;\n                        if (\n                          !attachment_rows.find(`[data-file-name=\"${f.name}\"]`)\n                            .length\n                        ) {\n                          f.file_url = frappe.urllib.get_full_url(f.file_url);\n                          attachment_rows.append(get_attachment_row(f));\n                        }\n                      });\n                    }\n                  }\n                };\n\n                let get_attachment_row = (attachment, checked) => {\n                  const radioGroupName = 'attachmentRadioGroup';\n\n                  return $(`\n                    <p class=\"flex\">\n                      <label class=\"attachment-radio\">\n                        <input type=\"radio\" name=\"${radioGroupName}\"\n                               data-file-name=\"${attachment.name}\" ${checked ? 'checked' : ''\n                    }>\n                        </input>\n                        <span class=\"ellipsis\">${attachment.file_name}</span>\n                      </label>\n                      &nbsp;\n                      <a href=\"${attachment.file_url\n                    }\" target=\"_blank\" class=\"btn-linkF\">\n                        ${frappe.utils.icon('link-url')}\n                      </a>\n                    </p>`);\n                };\n\n                let get_attachments = () => {\n                  const selected_attachment = $(dialog.wrapper)\n                    .find('[data-file-name]:checked')\n                    .attr('data-file-name');\n                  return selected_attachment ? selected_attachment : '';\n                };\n\n                let dialog;\n                if (!dialog) {\n                  dialog = new frappe.ui.Dialog({\n                    title: __('Send a Raven'),\n                    fields: [\n                      {\n                        fieldname: 'type',\n                        label: 'Type',\n                        fieldtype: 'Select',\n                        options: ['DM', 'Channel'],\n                        default: 'Channel',\n                        onchange: function () {\n                          let field = dialog.get_field('channel');\n                          if (this.value === 'DM') {\n                            field.df.options = dm_list;\n                          } else {\n                            field.df.options = channel_list;\n                          }\n                          field.refresh();\n                        },\n                      },\n                      {\n                        fieldname: 'channel',\n                        label: 'Channel/DM',\n                        fieldtype: 'Select',\n                        options: channel_list,\n                        reqd: 1,\n                      },\n                      {\n                        fieldname: 'message',\n                        label: 'Message',\n                        fieldtype: 'Long Text',\n                        // reqd: 1,\n                      },\n                      { fieldtype: 'Section Break' },\n                      {\n                        label: __('Select Attachments'),\n                        fieldtype: 'HTML',\n                        fieldname: 'select_attachments',\n                      },\n                    ],\n                    primary_action_label: __('Send'),\n                    primary_action(values) {\n                      let attachments = get_attachments();\n                      send_message(values, channel_id, attachments);\n                      dialog.hide();\n                    },\n                    secondary_action_label: __('Discard'),\n                    secondary_action() {\n                      dialog.hide();\n                    },\n                    minimizable: true,\n                  });\n                }\n                setup_attach();\n                dialog.show();\n              } else {\n                frappe.msgprint({\n                  title: __('Send a Raven'),\n                  indicator: 'blue',\n                  message: __('No channels found'),\n                });\n              }\n            };\n\n            let get_channels = () => {\n              return frappe.call({\n                method: 'raven.api.raven_channel.get_channels',\n                args: {\n                  hide_archived: true,\n                },\n                callback: function (r) {\n                  if (r && r.message) {\n                    return r.message;\n                  }\n                },\n              });\n            };\n\n            let send_message = (values, channel_id, attachments) => {\n              // let channel = values.channel;\n              let channel = channel_id.find(\n                (channel) => channel.name == values.channel\n              ).value;\n              // get message from values.message and clean it up, remove html tags\n              // let message = values.message.replace(/<[^>]*>?/gm, '');\n              let message = values.message;\n\n              let get_type = (url) => {\n                if (url) {\n                  let fileExt = [\n                    'jpg',\n                    'JPG',\n                    'jpeg',\n                    'JPEG',\n                    'png',\n                    'PNG',\n                    'gif',\n                    'GIF',\n                  ];\n                  let ext = url.split('.').pop();\n                  if (fileExt.includes(ext)) {\n                    return 'Image';\n                  } else {\n                    return 'File';\n                  }\n                }\n                return 'Text';\n              };\n\n              frappe.db\n                .get_value('File', { name: attachments }, 'file_url')\n                .then((res) => {\n                  return frappe.db.insert({\n                    doctype: 'Raven Message',\n                    channel_id: channel,\n                    text: message,\n                    json: {\n                      \"content\": [\n                        {\n                          \"content\": [\n                            {\n                              \"text\": message,\n                              \"type\": \"text\"\n                            }\n                          ],\n                          \"type\": \"paragraph\"\n                        }\n                      ],\n                      \"type\": \"doc\"\n                    },\n                    message_type: get_type(res?.message?.file_url),\n                    file: res?.message?.file_url || '',\n                    link_doctype: frm.doctype,\n                    link_document: frm.docname,\n                  });\n                })\n                .then(() => {\n                  frm.reload_doc();\n                  frappe.show_alert({\n                    message: __('Message sent'),\n                    indicator: 'green',\n                  });\n                  frappe.utils.play_sound('email');\n                })\n                .catch((err) => {\n                  frappe.throw(__('Error sending message'));\n                });\n            };\n\n            let send_raven = () => {\n              get_channels().then((channels) => send_message_modal(channels));\n            };\n\n            var timeline = frm.footer.frm.timeline;\n            // check the button is not already added by checking the class name 'send-raven-button'\n\n            timeline.add_action_button(\n              __('Send a Raven'),\n              send_raven,\n              'share',\n              'btn-secondary send-raven-button'\n            );\n            buttonAdded = true;\n          }\n        }\n      },\n    });\n  });\n});\n", "$(document).on('app_ready', function () {\n    if (frappe.boot.show_raven_chat_on_desk && frappe.user.has_role(\"Raven User\")) {\n\n        // If on mobile, do not show the chat\n        if (frappe.is_mobile()) {\n            return;\n        }\n        let main_section = $(document).find('.main-section');\n\n        // Add bottom padding to the main section\n        main_section.css('padding-bottom', '60px');\n\n        let chat_element = $(document.createElement('div'));\n        chat_element.addClass('raven-chat');\n\n        main_section.append(chat_element);\n\n        frappe.require(\"raven_chat.bundle.jsx\").then(() => {\n            frappe.raven_chat = new frappe.ui.RavenChat({\n                wrapper: chat_element,\n            });\n        });\n    }\n\n});\nimport './templates/send_message.html';\nimport './timeline_button';\n"],
  "mappings": ";;AACC,SAAO,UAAU,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACApC,IAAE,QAAQ,EAAE,GAAG,aAAa,WAAY;AACtC,MAAE,KAAK,OAAO,KAAK,KAAK,UAAU,SAAU,GAAG,SAAS;AACtD,UAAI,cAAc;AAElB,aAAO,GAAG,KAAK,GAAG,SAAS;AAAA,QACzB,SAAS,SAAU,KAAK;AAN9B;AAOQ,cAAI,CAAC,IAAI,OAAO,GAAG;AACjB,kBAAI,eAAI,WAAJ,mBAAY,QAAZ,mBAAiB,aAAY,CAAC,aAAa;AAC7C,kBAAI,qBAAqB,CAAC,aAAa;AACrC,oBAAI,YAAY,SAAS,WAAW,SAAS,QAAQ,SAAS,GAAG;AAC/D,sBAAI,aAAa,CAAC;AAClB,sBAAI,UAAU,CAAC;AACf,sBAAI,eAAe,CAAC;AAEpB,2BAAS,QAAQ,QAAQ,CAAC,YAAY;AACpC,wBAAI,QAAQ,mBAAmB;AAC7B,8BAAQ,KAAK,QAAQ,SAAS;AAC9B,iCAAW,KAAK;AAAA,wBACd,OAAO,QAAQ;AAAA,wBACf,MAAM,QAAQ;AAAA,sBAChB,CAAC;AAAA,oBACH,OAAO;AACL,mCAAa,KAAK,QAAQ,YAAY;AACtC,iCAAW,KAAK;AAAA,wBACd,OAAO,QAAQ;AAAA,wBACf,MAAM,QAAQ;AAAA,sBAChB,CAAC;AAAA,oBACH;AAAA,kBACF,CAAC;AAED,sBAAI,eAAe,MAAM;AACvB,0BAAM,SAAS,OAAO;AACtB,0BAAM,SAAS,EAAE,OAAO,mBAAmB,OAAO;AAElD,wBAAI,CAAC,IAAI,aAAa;AACpB,0BAAI,cAAc,CAAC;AAAA,oBACrB;AAEA,wBAAI,OAAO;AAAA,sBACT,QAAQ;AAAA,sBACR,YAAY,CAAC,eAAe;AAC1B,4BAAI,YAAY,KAAK,UAAU;AAC/B,+CAAuB;AAAA,sBACzB;AAAA,oBACF;AAEA,wBAAI,KAAK;AACP,6BAAO;AAAA,wBACL,SAAS,IAAI;AAAA,wBACb,SAAS,IAAI;AAAA,wBACb,QAAQ;AAAA,wBACR,YAAY,CAAC,eAAe;AAC1B,8BAAI,YAAY,oBAAoB,UAAU;AAC9C,iDAAuB;AAAA,wBACzB;AAAA,sBACF;AAAA,oBACF;AAEA,sBAAE;AAAA;AAAA,wBAEI,GAAG,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKrB,OAAO,MAAM,KAAK,aAAa,IAAI;AAAA,0BACnC,GAAG,gBAAgB;AAAA;AAAA;AAAA,mBAG1B,EAAE,SAAS,OAAO,MAAM,CAAC;AAE1B,2BACG,KAAK,8BAA8B,EACnC,GAAG,SAAS,MAAM,IAAI,OAAO,GAAG,aAAa,IAAI,CAAC;AACrD,2CAAuB;AAAA,kBACzB;AAEA,sBAAI,yBAAyB,CAAC,eAAe;AAC3C,0BAAM,qBACJ,OAAO,YAAY;AACrB,0BAAM,kBAAkB,EAAE,mBAAmB,OAAO,EAAE;AAAA,sBACpD;AAAA,oBACF;AAGA,oCAAgB,MAAM;AAEtB,wBAAI,YAAY;AACd,sCAAgB;AAAA,wBACd,mBAAmB,YAAY,IAAI;AAAA,sBACrC;AAAA,oBACF,OAAO;AACL,0BAAI,QAAQ,CAAC;AAIb,0BAAI,IAAI,eAAe,IAAI,YAAY,QAAQ;AAE7C,gCAAQ,MAAM;AAAA,0BACZ,IAAI,YAAY,OAAO,CAACA,aAAY,OAAO,UAAU;AACnD,mCAAO,CAAC,MACL,MAAM,GAAG,KAAK,EACd;AAAA,8BACC,CAAC,QAAQ,IAAI,cAAcA,YAAW;AAAA,4BACxC;AAAA,0BACJ,CAAC;AAAA,wBACH;AAAA,sBACF;AACA,0BAAI,KAAK;AACP,gCAAQ,MAAM,OAAO,IAAI,UAAU,CAAC;AAEpC,gCAAQ,MAAM,OAAO,CAACA,aAAY,OAAO,UAAU;AACjD,iCAAO,CAAC,MACL,MAAM,GAAG,KAAK,EACd;AAAA,4BACC,CAAC,QAAQ,IAAI,cAAcA,YAAW;AAAA,0BACxC;AAAA,wBACJ,CAAC;AAAA,sBACH;AAEA,0BAAI,MAAM,QAAQ;AAChB,0BAAE,KAAK,OAAO,CAACC,IAAG,MAAM;AACtB,8BAAI,CAAC,EAAE;AAAW;AAClB,8BACE,CAAC,gBAAgB,KAAK,oBAAoB,EAAE,QAAQ,EACjD,QACH;AACA,8BAAE,WAAW,OAAO,OAAO,aAAa,EAAE,QAAQ;AAClD,4CAAgB,OAAO,mBAAmB,CAAC,CAAC;AAAA,0BAC9C;AAAA,wBACF,CAAC;AAAA,sBACH;AAAA,oBACF;AAAA,kBACF;AAEA,sBAAI,qBAAqB,CAAC,YAAY,YAAY;AAChD,0BAAM,iBAAiB;AAEvB,2BAAO,EAAE;AAAA;AAAA;AAAA,oDAGyB;AAAA,iDACH,WAAW,SAAS,UAAU,YAAY;AAAA;AAAA,iDAG1C,WAAW;AAAA;AAAA;AAAA,iCAG3B,WAAW;AAAA,0BAElB,OAAO,MAAM,KAAK,UAAU;AAAA;AAAA,yBAE7B;AAAA,kBACT;AAEA,sBAAI,kBAAkB,MAAM;AAC1B,0BAAM,sBAAsB,EAAE,OAAO,OAAO,EACzC,KAAK,0BAA0B,EAC/B,KAAK,gBAAgB;AACxB,2BAAO,sBAAsB,sBAAsB;AAAA,kBACrD;AAEA,sBAAI;AACJ,sBAAI,CAAC,QAAQ;AACX,6BAAS,IAAI,OAAO,GAAG,OAAO;AAAA,sBAC5B,OAAO,GAAG,cAAc;AAAA,sBACxB,QAAQ;AAAA,wBACN;AAAA,0BACE,WAAW;AAAA,0BACX,OAAO;AAAA,0BACP,WAAW;AAAA,0BACX,SAAS,CAAC,MAAM,SAAS;AAAA,0BACzB,SAAS;AAAA,0BACT,UAAU,WAAY;AACpB,gCAAI,QAAQ,OAAO,UAAU,SAAS;AACtC,gCAAI,KAAK,UAAU,MAAM;AACvB,oCAAM,GAAG,UAAU;AAAA,4BACrB,OAAO;AACL,oCAAM,GAAG,UAAU;AAAA,4BACrB;AACA,kCAAM,QAAQ;AAAA,0BAChB;AAAA,wBACF;AAAA,wBACA;AAAA,0BACE,WAAW;AAAA,0BACX,OAAO;AAAA,0BACP,WAAW;AAAA,0BACX,SAAS;AAAA,0BACT,MAAM;AAAA,wBACR;AAAA,wBACA;AAAA,0BACE,WAAW;AAAA,0BACX,OAAO;AAAA,0BACP,WAAW;AAAA,wBAEb;AAAA,wBACA,EAAE,WAAW,gBAAgB;AAAA,wBAC7B;AAAA,0BACE,OAAO,GAAG,oBAAoB;AAAA,0BAC9B,WAAW;AAAA,0BACX,WAAW;AAAA,wBACb;AAAA,sBACF;AAAA,sBACA,sBAAsB,GAAG,MAAM;AAAA,sBAC/B,eAAe,QAAQ;AACrB,4BAAI,cAAc,gBAAgB;AAClC,qCAAa,QAAQ,YAAY,WAAW;AAC5C,+BAAO,KAAK;AAAA,sBACd;AAAA,sBACA,wBAAwB,GAAG,SAAS;AAAA,sBACpC,mBAAmB;AACjB,+BAAO,KAAK;AAAA,sBACd;AAAA,sBACA,aAAa;AAAA,oBACf,CAAC;AAAA,kBACH;AACA,+BAAa;AACb,yBAAO,KAAK;AAAA,gBACd,OAAO;AACL,yBAAO,SAAS;AAAA,oBACd,OAAO,GAAG,cAAc;AAAA,oBACxB,WAAW;AAAA,oBACX,SAAS,GAAG,mBAAmB;AAAA,kBACjC,CAAC;AAAA,gBACH;AAAA,cACF;AAEA,kBAAI,eAAe,MAAM;AACvB,uBAAO,OAAO,KAAK;AAAA,kBACjB,QAAQ;AAAA,kBACR,MAAM;AAAA,oBACJ,eAAe;AAAA,kBACjB;AAAA,kBACA,UAAU,SAAU,GAAG;AACrB,wBAAI,KAAK,EAAE,SAAS;AAClB,6BAAO,EAAE;AAAA,oBACX;AAAA,kBACF;AAAA,gBACF,CAAC;AAAA,cACH;AAEA,kBAAI,eAAe,CAAC,QAAQ,YAAY,gBAAgB;AAEtD,oBAAI,UAAU,WAAW;AAAA,kBACvB,CAACC,aAAYA,SAAQ,QAAQ,OAAO;AAAA,gBACtC,EAAE;AAGF,oBAAI,UAAU,OAAO;AAErB,oBAAI,WAAW,CAAC,QAAQ;AACtB,sBAAI,KAAK;AACP,wBAAI,UAAU;AAAA,sBACZ;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,oBACF;AACA,wBAAI,MAAM,IAAI,MAAM,GAAG,EAAE,IAAI;AAC7B,wBAAI,QAAQ,SAAS,GAAG,GAAG;AACzB,6BAAO;AAAA,oBACT,OAAO;AACL,6BAAO;AAAA,oBACT;AAAA,kBACF;AACA,yBAAO;AAAA,gBACT;AAEA,uBAAO,GACJ,UAAU,QAAQ,EAAE,MAAM,YAAY,GAAG,UAAU,EACnD,KAAK,CAAC,QAAQ;AAnR/B,sBAAAC,KAAAC;AAoRkB,yBAAO,OAAO,GAAG,OAAO;AAAA,oBACtB,SAAS;AAAA,oBACT,YAAY;AAAA,oBACZ,MAAM;AAAA,oBACN,MAAM;AAAA,sBACJ,WAAW;AAAA,wBACT;AAAA,0BACE,WAAW;AAAA,4BACT;AAAA,8BACE,QAAQ;AAAA,8BACR,QAAQ;AAAA,4BACV;AAAA,0BACF;AAAA,0BACA,QAAQ;AAAA,wBACV;AAAA,sBACF;AAAA,sBACA,QAAQ;AAAA,oBACV;AAAA,oBACA,cAAc,UAASD,MAAA,2BAAK,YAAL,gBAAAA,IAAc,QAAQ;AAAA,oBAC7C,QAAMC,MAAA,2BAAK,YAAL,gBAAAA,IAAc,aAAY;AAAA,oBAChC,cAAc,IAAI;AAAA,oBAClB,eAAe,IAAI;AAAA,kBACrB,CAAC;AAAA,gBACH,CAAC,EACA,KAAK,MAAM;AACV,sBAAI,WAAW;AACf,yBAAO,WAAW;AAAA,oBAChB,SAAS,GAAG,cAAc;AAAA,oBAC1B,WAAW;AAAA,kBACb,CAAC;AACD,yBAAO,MAAM,WAAW,OAAO;AAAA,gBACjC,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,yBAAO,MAAM,GAAG,uBAAuB,CAAC;AAAA,gBAC1C,CAAC;AAAA,cACL;AAEA,kBAAI,aAAa,MAAM;AACrB,6BAAa,EAAE,KAAK,CAAC,aAAa,mBAAmB,QAAQ,CAAC;AAAA,cAChE;AAEA,kBAAI,WAAW,IAAI,OAAO,IAAI;AAG9B,uBAAS;AAAA,gBACP,GAAG,cAAc;AAAA,gBACjB;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AACA,4BAAc;AAAA,YAChB;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;;;AC5UD,IAAE,QAAQ,EAAE,GAAG,aAAa,WAAY;AACpC,QAAI,OAAO,KAAK,2BAA2B,OAAO,KAAK,SAAS,YAAY,GAAG;AAG3E,UAAI,OAAO,UAAU,GAAG;AACpB;AAAA,MACJ;AACA,UAAI,eAAe,EAAE,QAAQ,EAAE,KAAK,eAAe;AAGnD,mBAAa,IAAI,kBAAkB,MAAM;AAEzC,UAAI,eAAe,EAAE,SAAS,cAAc,KAAK,CAAC;AAClD,mBAAa,SAAS,YAAY;AAElC,mBAAa,OAAO,YAAY;AAEhC,aAAO,QAAQ,uBAAuB,EAAE,KAAK,MAAM;AAC/C,eAAO,aAAa,IAAI,OAAO,GAAG,UAAU;AAAA,UACxC,SAAS;AAAA,QACb,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EAEJ,CAAC;",
  "names": ["attachment", "i", "channel", "_a", "_b"]
}
